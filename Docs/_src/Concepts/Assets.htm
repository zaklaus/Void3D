<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Assets_files/filelist.xml">
<link rel=Edit-Time-Data href="./Assets_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Asset management</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Michal</o:Author>
  <o:LastAuthor>Mike</o:LastAuthor>
  <o:Revision>50</o:Revision>
  <o:TotalTime>235</o:TotalTime>
  <o:Created>2003-05-07T09:36:00Z</o:Created>
  <o:LastSaved>2003-05-09T20:43:00Z</o:LastSaved>
  <o:Pages>3</o:Pages>
  <o:Words>1974</o:Words>
  <o:Characters>11253</o:Characters>
  <o:Lines>93</o:Lines>
  <o:Paragraphs>22</o:Paragraphs>
  <o:CharactersWithSpaces>13819</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>90</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:11.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	mso-font-kerning:0pt;}
h2
	{mso-style-next:Normal;
	margin-top:0pt;
	margin-right:-81.0pt;
	margin-bottom:0pt;
	margin-left:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;}
h3
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;}
h4
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h5
	{mso-style-next:Normal;
	margin-top:0pt;
	margin-right:-81.0pt;
	margin-bottom:0pt;
	margin-left:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:11.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{mso-style-next:Normal;
	margin-top:0pt;
	margin-right:0pt;
	margin-bottom:0pt;
	margin-left:-7.2pt;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0pt;
	margin-right:-81.0pt;
	margin-bottom:0pt;
	margin-left:0pt;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:108353291;
	mso-list-type:hybrid;
	mso-list-template-ids:176330070 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0pt;}
ul
	{margin-bottom:0pt;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
  <o:regrouptable v:ext="edit">
   <o:entry new="1" old="0"/>
  </o:regrouptable>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:36.0pt'>

<div class=Section1>

<h1><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt;font-family:"Times New Roman"'>Asset
management<o:p></o:p></span></h1>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>


<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>This session discusses about directory structure in a game
utilizing Insanity engine, common file formats, conversions, scene creation,
and similar tasks.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Most of this information is just a suggestion, because it is
possible to use the engine in many other ways.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h1><span style='font-size:12.0pt'>Directories</span></h1>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>There’re various directories in the root game’s directory
where particular assets reside:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>_src<o:p></o:p></span></b></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Directory containing source files, from which game
executable is being built. This is useful for game programmers. The directory
name begins with underscore, to mark that this directory will not be shipped
with final game (it’s convenience to marks all directories which won’t be
shipped with game by underscore). The source files are kept and built here.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Bin</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Directory for binary files (executables and DLLs). This is
the destination directory into which executable is built. This directory is
given to non-programming stuff including engine DLL. Programmers may decide to
keep engine DLLs for them elsewhere (in the Insanity3D\DLL directory), which is
useful mainly if multiple projects are built, or just for distinguishing game
files from engine files. When shipping, this directory contains game EXE as
well as DLLs.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Maps</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Directory containing all maps. The directory may contain
sub-directories with bitmaps, but all sub-directories must be added to the <i>Paths.txt</i>
file located in the Maps directory.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Most convenient format for bitmaps is PNG, which supports
loseless compression, any common bit depth including embedded alpha channel,
and is widely supported. If you plan to release very small version of a game
demo, you may decide using JPG format.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The engine loads bitmap from any registered directory
(there’s no sub-path encoded in the bitmap name), so it’s suggested to avoid
bitmap name duplication in various directories. The Validity plugin of Insanity
editor performs the name duplication check. The benefit is that you may
reorganize bitmaps during development into subdirectories without affecting
existing work.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Sounds</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The sounds are usually kept in WAV format during
development. It is recommended to keep the sound files in maximal possible
quality (e.g. 44KHz) at development time, and decide the sound quality when
final CD is created. The engine supports OGG sound format, which is an
alternative to MP3, and provides similar compression ratio. When final CD is
built, sounds may be compressed into OGG format with desired quality, using the
batch sound conversion tool, and optionally playback rate may be changed too.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Sound file names are stored without extension anywhere in
the engine. The sound loader used by game tries to load OGG version, then WAV
version, and returns failure code when none of them was found. So the loader
(located in game source files) is already prepared to handle both extensions.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Missions</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>This directory contains actual game missions, and other
assets associated with them. Each mission resides in its own directory. You may
also build any directory tree for keeping the mission in order. Each mission
directory contains at minimum these files:<o:p></o:p></span></p>

<ul style='margin-top:0pt' type=disc>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list 36.0pt'><span
     style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>­<i>scene.i3d</i>
     – file exported from modeling package, containing raw geometry<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list 36.0pt'><i><span
     style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>scene.bin</span></i><span
     style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'> –
     file created and used by Insanity editor, containing all modifications, settings,
     lightmaps, AI setup, actors and all other information edited in the
     editor, and related to the mission.<o:p></o:p></span></li>
</ul>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Additionally, the directories with missions contain all <b>scripts</b>
used in particular mission. If there’re too many scripts in a mission, you may
create sub-directories for groups of scripts. Scripts have extension SCR. The
script compiler may generate pre-compiled scripts, which have extension PCP and
are kept at the same directory as the original script, using the same name
base. You may decide to ship only precompiled PCP versions of scripts for final
game.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The scripts which are common for all missions reside
directly in top level of Missions directory. The script loader stores
information about if script is to be located in local mission’s directory, of
from global directory.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The Missions directory is also used to hold other assets
edited in the Editor. These are mainly models (which are missions loaded as
models into other mission), and animations – mission-like files, edited by the
Editor, containing animations.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Models</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Directory containing models. Models are actually
micro-scenes – files exported from modeling package. These models are ideal for
items reused in many missions. The directory may contain subdirectories, each
holding models of particular category. Unlike with maps, when using models in
mission, its entire path and filename is stored (relative to the root Models
directory), so you cannot easily move or rename model without affecting
missions which use it.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Models have I3D extension, and usually this directory
contains nothing else than plain model files.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Anims</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Animation files. This directory contains I3D files (or files
in other format) containing animations.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Texts</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>This directory is for storing localized text files. It is a
good idea to think about localization in early stages of development, and not
hard-coding strings directly into source files or scripts. This directory
contains sub-directory for all languages in which game will be published. Each
subdirectory contains the same-named file(s) with localized texts. Depending on
language version, correct text files are loaded.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Internally, the game uses <b>C_all_texts</b> class located
in <i>Insanity\ Texts.h</i> header file. This class is used for managing
localized texts. It supports both ANSI and Unicode text files.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The strings in the text files are encoded such, that each
text (may be on multiple lines) has associated ID, which is actually a
descriptive string. You may use this text ID whenever you need to display
localized text, using the help of the text class for transforming a text ID
into real localized text.<i><o:p></o:p></i></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Procedurals</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Directory containing procedural scripts used by engine
loader. These are small text files defining behavior of procedural textures,
morphed objects, etc. Some of them are edited in the Insanity Editor, others
are edited directly in a text editor.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Tables<span style='font-weight:normal'><o:p></o:p></span></h3>

<h3><span style='font-weight:normal'>This directory is for all configuration
tables, sprite definitions, and other files used by the game, which have global
typically use. This is place where programmers put their scripts and other
files. The format of the files is not strictly given, so essentially this
directory is for “everything else”, what didn’t fit into other directory.<o:p></o:p></span></h3>

<h3><span style='font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></h3>

<h3>Editor<span style='font-weight:normal'><o:p></o:p></span></h3>

<h3><span style='font-weight:normal'>This directory contains configuration
files and macros used by the editor. It may optionally be shipped with the
game, if the game contains the Editor. Otherwise, the game must be able to work
properly without files in this directory.<o:p></o:p></span></h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Data</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>This directory may contain the data files (DTA), where all
the other directories will be stored to, when game will ship. At final stages
of generating of game shipping data, many directories, containing hundreds of
individual files, may be compressed (or simply stored in an archive without
compression) into several huge data files. Those data files may be stored in
the Data directory. When the game ships, it may contain just two directories: <i>Bin</i>
and <i>Data</i>. Binary files cannot be stored in data file (operating system
would not load them), while other data, loaded by DTARead library, may be.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>To create the DTA files, use freely available ZIP packer
(ideally command-line version), and store desired files into the huge data
files. You may chose compression, but decompressing the assets during loading
may be slower than using no compression.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Another reason why it is good to use huge data files is that
you may create several setup files, which either copy data into hard disk or
leave them on CD, and only care about where data are located during game
startup. Simply open data file from correct source and do not care further
about from where files are loaded.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h4><span style='font-family:Arial'>Working with scenes<o:p></o:p></span></h4>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Creating</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>To create a new scene, copy the files from _null scene into
a new location, and start working with the scene.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Lighting</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The lighting of missions is done in the Insanity editor,
which provides a comfortable way of light creation, their setup, and assignment
into correct sectors, while seeing the results of the editing in real-time.
Lights are not exported from modeling packages.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Each light may work on vertices, lightmaps, as shadow
source, or dynamically on lightmaps. You may create some lights to be
vertex-only, while other only due to lightmapping. The number of lights which
may affect geometry is limited (actually, there’s no meaning to use more than 5
lights on a single object), and negatively affects performance. But when
constructing lightmaps, the number of lights affecting lightmaps may be much
greater – the only penalty is time of lightmap computation.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Sound design</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Sounds, like lights, are also created in the editor. The
work is very similar – sounds have range, some have orientation. There’s
comfortable sound browser in the editor. You may also utilize EAX to enhance
environments with various sound echoes and other properties. Each sector in
Insanity may have assigned one of sound environment set (editable in a table),
and when listener enters particular sector, the environment properties are
applied.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3>Scene validation</h3>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>There’re many problems which may arise during asset
creation. Many of comm. problems are repeating, so Insanity provides several
ways of content validation. First validation is performed during export – the
exported eliminates some basic problems, like material duplication, and similar
problems. Second (very thorough) validation is done by the scene and model
loader, which performs mainly geometry validation, and checks duplicated
vertices, unused vertices, duplicated faces, and many other issues. All found
errors are reported to user by the Log window, so that artists may immediately
take actions to correct their objects.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Another level of validation is implemented in specialized
editor plugin called <i>Validation</i>, which performs many others validation
checks, mainly problems which arises during scene editing. This plugin checks for
example if there’re not two exact objects in exactly same place, if sounds and
lights are set up properly, and other tasks. It also lets programmers to write
additional tests for specific game, for example if James Bond has appropriate
weapons in his inventory for given mission.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h4><span style='font-family:Arial'>Source control integration<o:p></o:p></span></h4>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>It is recommended to use some asset control system (for
example Microsoft Visual SourceSafe, AlienBrain, or similar) for keeping game
assets. The editor has built in support for getting, checking-out and
checking-in files from/to source control database. Currently, the system works
with Visual SourceSafe. It is a matter of few changes in the game source code
to set up base directory, in which game is located in the source control
database. The editor allows checking in and out mission files directly from
within its environment, and disables editing when files are read-only. Also,
additional editor plugins for editing tables and scripts are able to check
files in our out, so that designers do not need to leave the editor in order to
perform these operations.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h4><span style='font-family:Arial'>Game testing mode<o:p></o:p></span></h4>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The Insanity editor is just a tool run beside the game,
which allows to build the game. Anyway, it’s still the game, which is run, on which
editor works. So there’s a very simple way to switch off the editor and begin
the game. Using the F6 key, editor is deactivated, and loaded mission is being
run as it will be when it ships. Most editor shortcuts are deactivated too, so
that game may be normally tested, anyway some basic shortcuts are allowed, for
example switching active camera from game’s camera into editor camera and
observe the game from other than game camera. Also, it is possible to slow down
or speed up time, observe game actors by clicking on them and displaying their
state onto screen, etc. By pressing F5, the game is ended and editor is
activated again.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Since the objects in the mission may move, be created or
destroyed (and mission is thus modified without use of the editor), the mission
gets locked when the game mode is entered. Furthermore, it is not possible to
edit or save the mission when returning from the game mode. Anyway, user is
asked to save his changes before entering the game mode.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h4><span style='font-family:Arial'>Caching<o:p></o:p></span></h4>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoBodyText2>Insanity engine uses sophisticated caching system in
order to provide best possible performance. Although there’s many caching in
various parts of system (texture caching, file caching, etc), here we’ll talk
about asset caching, which has big impact on overall work with the engine, as
well as affects end-users (players).</p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>This cache system is based on a big temporary file (200MB,
may be changed), which is created first time the game is run. The file is
located in <i>_tmp</i> directory, and it contains all many results of heavy
computations, which are performed on files during asset loading. Insanity
engine has the philosophy of not keeping redundant information in files (for
example vertex normals), because the algorithm to compute may change, and files
would need to be re-exported or somehow updated. Rather, the system stores
minimal possible information if files, and computes what’s necessary at load
time. This includes vertex normals, single-mesh initialization,
level-of-detail, texture conversions, etc. All these operations take relatively
long time (if they have to be done right), so the effort was not put into squeezing
the computation times for each cost, but rather storing intermediate results,
and reusing them when assets are loaded next time.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>You may notice, that first time complex missions are loaded,
it takes several time longer than when they’re loaded again. The ratio may be
1:10 or more. This is due to using the cache, so practically loading a mission
is limited by disk speed.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>The cache is limited by fixed disk size, so that when there’s
more information to be cached than this space, oldest items in the cache are
discarded. The size of 200MB should be sufficient for caching several large
missions, and since players use to replay same mission multiple time, then
moving to other (and also assets among missions are also reused), this approach
significantly improves player’s experience by very low loading times.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Not less importantly, it allows faster game development,
because it’s difference for all programmers, designers or artists, if mission loads
in 0.5 second or 12 seconds.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'>Another handy feature is used by editor, which, when
reloading the same mission, doesn’t purge and reload the textures, but rather
keeps them in memory and reuses them. This is useful mainly for designer,
reloading missions often during mission design. Texture artists may decide to
not using this feature, which may cause their texture changes not to be seen
after reload.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

</div>

</body>

</html>
