<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Debugging_files/filelist.xml">
<link rel=Edit-Time-Data href="./Debugging_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Debugging tips</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Mike</o:Author>
  <o:LastAuthor>Michal</o:LastAuthor>
  <o:Revision>58</o:Revision>
  <o:TotalTime>572</o:TotalTime>
  <o:Created>2002-05-30T07:47:00Z</o:Created>
  <o:LastSaved>2003-05-08T07:16:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>1495</o:Words>
  <o:Characters>8523</o:Characters>
  <o:Company> </o:Company>
  <o:Lines>71</o:Lines>
  <o:Paragraphs>17</o:Paragraphs>
  <o:CharactersWithSpaces>10466</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>90</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:11.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	mso-font-kerning:0pt;
	font-weight:normal;}
h2
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:11.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	font-weight:normal;}
h3
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:11.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	font-weight:normal;}
h4
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:11.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	font-weight:normal;}
h6
	{mso-style-next:Normal;
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:6;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Arial;
	font-weight:normal;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
p
	{margin-right:0pt;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 65.95pt 72.0pt 65.95pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1278563751;
	mso-list-type:hybrid;
	mso-list-template-ids:717398834 97311128 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
ol
	{margin-bottom:0pt;}
ul
	{margin-bottom:0pt;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:36.0pt'>

<div class=Section1>

<p><strong><span style='font-size:24.0pt;mso-bidi-font-size:12.0pt'>Debugging
tips using Insanity engine</span></strong><span style='font-size:24.0pt;
mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>


<p class=MsoNormal><strong><span style='font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-family:Arial'>Using customized
assert</span></strong><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>In debug version of your
application, include <i>Insanity\assert.h</i> header file. This header provides
same macro as standard C library, but it is adjusted to work with </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>IExcept </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'>library. The behavior is identical to standard C assert, but the action
performed when expression is false is different. This macro, while very simple,
puts necessary information onto stack, and uses int 3 opcode to raise
BREAKPOINT exception. If application is debugged in a debugger, this causes
stopping the debugger on the assert macro. If program is run without debugger,
it invokes dialog box showing the file, line and expression, as well as calling
stack from Main function up to assert macro.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Choosing Insanity assert macro
requires just simple change – inclusion of different header file. You may
revert anytime to standard C assert when you wish.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Note that in order to utilize the
built-in behavior of IExcept library with the assert macro, you must initialize
the library using </span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial'>InitializeExceptions</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> function.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>See also:<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><a href="..\iexcept\desc.htm"><b>IExcept
library</b></a><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<h1>

<hr size=1 width="49%" align=left>

</h1>


<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h1><strong>Filling uninitialized local variables to mess<o:p></o:p></strong></h1>

<p class=MsoNormal><strong><span style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>You may decide to override default
command line switch of Visual Studio /GZ, which fills local variables by value
0xcc, and instead use build-in Insanity system, which fills local variables by
better chosen dword value 0x7faecece. This was chosen because it is signaled
NaN (while 0xcccccccc is not), so that you easily detect use of uninitialized
float or double variables, because on any attempt to use such variable, an
exception dialog of </span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial'>IExcept</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> library will raise, showing you exact location where this attempt
occurred.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>To set up this behavior, follow
these steps:<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>clear /GZ
command line switch in C/C++ project options of debug version of your C++
project<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>add /Gh command
line switch<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>link
application with base_lib.lib, or base_lib_d.lib from Insanity libraries (note
that by including some of Insanity header files, this library is automatically
added for linking with)<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>How this works: the command-line
switch /Gh causes MSVC to insert call to __penter method at beginning of each
function. This function must be provided by application. Insanity provides this
function in library base_lib.lib, and it performs actual initialization of
local variables before program enters particular function. It fills local
variables of all function compiled with the /Gh flag.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Note that filling your variables
by some value significantly slows down your application, and is intended only
for debug builds. You may choose to provide your non-programming developers
with release version of your game application. Also, disable this behavior if
you plan doing performance tuning of your game, because most of time will be
spent in __penter function.<o:p></o:p></span></strong></p>

<p style='margin:0pt;margin-bottom:.0001pt'><strong><span style='font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<p style='margin:0pt;margin-bottom:.0001pt'><strong><span style='font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>Using customized new/delete allocations<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>You may chose to use customized
new/delete operators for following reasons:<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>filling newly
allocated memory with mess (similar like filling local variables with mess)<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>checking for
memory leaks<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>checking for
attempts to delete memory not allocated by new<o:p></o:p></span></strong></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-weight:normal'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></strong><![endif]><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>checking for
writing past the boundaries of allocated memory<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>All this is accomplished by
Insanity debugging new and delete operators. These operators are used only for
debug version of your application (or if you link with base_lib_d.lib). This is
because only this library provides overridden operators new and delete. The
library base_lib.lib, which is the release version of the same library, doesn’t
contain these operators, and application is linked with standard memory
allocation operators.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Note that if you allocate and free
memory other way than using C++ new and delete operator, this behavior will not
happen, and you will not detect memory corruption. It is strongly recommended
to use only new and delete in C++ programs.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>How it works: when you provide
your own operator new and delete (as base_lib_d.lib does), your program will
link with them instead of standard ones. This is what we use here. Once the
operators are overridden, Insanity performs own allocation and freeing of
memory. If tracks allocated blocks, initializes memory to some invalid value,
and allocated extra space at beginning and end of returned block, which is
filled by special value. When memory is freed, it check if guarded memory
outside the block was not changed. It also fill freed memory to invalid value
again, in order to help checking cases when memory is used after it was freed.
Finally, when the program ends, it check if all allocated blocks were freed,
and if not, it displays dialog box, showing exact location (calling stack)
where unfreed memory was allocated.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Note that in order to utilize this
behavior fully, your application should use IExcept library and initialize it
using </span></strong><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>InitializeExceptions</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> function.</span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial'><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<p class=MsoNormal><strong><span style='font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>Utilizing C++ exception handling<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Insanity uses C++ exception
handling (also called synchronized exception handling) in several places, where
it is more comfortable to throw exception than returning and checking error
codes. Main areas where C++ exception handling is file I/O (using </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>C_cache</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> and </span></strong><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>C_chunk</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> classes declared in <i>C_cache.h</i> and <i>C_chunk.h</i>), and in
string class </span></strong><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>C_str</span></strong><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'>. In
future, it is possible that more classes will use exception handling.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>All exceptions are thrown using </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>C_except</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> class declared in <i>C_except.h</i> header file, which inherits from
STL’s std::exception. The class provides string of type C_str, keeping
description of the exception, and optionally the call stack captured when
exception is thrown, in order to identify the location of the exception.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>It is recommended to catch
exceptions in appropriate places. For example, knowing that I/O classes may
throw exception, it is advised to catch exceptions at loader functions. Often,
thrown exception means that file is corrupted, or application tries to read
data beyond range (e.g. out of chunk). Exception used in these cases provide
appropriate way to signal error, and way for application to recover from the
error elegantly, without terminating application. The top level try-catch block
is inside of Insanity startup routine, so any exception not caught by
application is caught by the library, and dialog box with an error description
is displayed.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Note that C++ exception handling
is not related to hardware exceptions caught by IExcept library, and both
mechanisms work independently of each other.<o:p></o:p></span></strong></p>

<p style='margin:0pt;margin-bottom:.0001pt'><strong><span style='font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<p style='margin:0pt;margin-bottom:.0001pt'><strong><span style='font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<h2><strong>Memory allocation failure<o:p></o:p></strong></h2>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>When system fails to allocate
memory by operator new, it throws exception of type C_except_mem (declared in <i>C_except.h</i>).
It is assumed that application typically runs on systems with large number of
memory, or with system supporting virtual memory, so failures to allocate
sufficient memory are not expected. Possible failure of memory allocation is
reported as an error.<o:p></o:p></span></strong></p>

<p style='margin:0pt;margin-bottom:.0001pt'><strong><span style='font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<h2><strong><span style='font-size:12.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></h2>

<h2><strong>Debugging problems in scenes<o:p></o:p></strong></h2>

<p class=MsoNormal><strong><span style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Most problems related to 3D data
are reported by library during loading. More subtle problems, which are not
possible to detect at load time, may be detected by Insanity editor’s <i>Validity</i>
plugin, which performs basic scene validation itself, and also lets other
plugins perform specialized validation by themselves. All errors are written
using Log window, and also frames which are the source of problem are usually
put into selection, so that correction of the problem is easier.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Using the Validity plugin is
mainly a tool for designers. Prorammers’ task is to write and keep updated
automatic validation tests appropriate for given game.<o:p></o:p></span></strong></p>

<p style='margin:0pt;margin-bottom:.0001pt'><strong><span style='font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<p class=MsoNormal><strong><span style='font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<h3><strong>Debugging aids when developing 3D game</strong><strong><span
style='font-weight:normal'><o:p></o:p></span></strong></h3>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>During development of 3D game,
most time programmers work in 3D environment. Some algorithms, for example path
finding or AI programming, require a lot of 3D math and computations in 3D. To
help development of such tasks, Insanity provides way of visualization of the
results. Most commonly visualized types are lines and points in 3D space.
Programmers have editor’s plugin <i>DebugLine</i> at their disposal, which
perform drawing of colored lines, shown for variable time, as desired. To make
the work easier, there’re several macros in game <i>main.h</i> header file,
which locate the plugin and call its methods, so that programmers do not need
write additional code searching the plugin.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>Another useful aid is writing
output messages. One way is adding text into the log window, but this method
has several problems, and is not used for real-time observation of variables,
mainly because the text scrolls, and the amount of texts in the Log window may
become too large. More comfortable way is writing texts directly on screen. There’re
two options – either one-time text (cleared each frame), or longer-lasting
text. Both modes use system of console, which adds texts at bottom of written
text. One-time text console is cleared after it is rendered. Longer-lasting
text console scrolls out slowly after some time. These methods are accessible
using </span></strong><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>PRINT</span></strong><strong><span style='font-size:
10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'> and </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>DEBUG</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> methods of </span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial'>C_editor</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> interface.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'>See also:<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><a href="..\IEditor\desc.htm"><b>C_editor</b></a><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<h4><strong>Using debug info<o:p></o:p></strong></h4>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>It is recommended to build main
executable as well as DLL libraries with debug info, for both debug and release
modes. For debug builds, the reason is obvious – allowing debugging the
application, using the </span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial'>IExcept</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> library. For release builds, the reason to build and distribute debug
info is that it is easier to track errors when debug info is present. Members
of development team, external testers as well as customers are all
non-technical users of the product, but the benefit lies in fact, that possible
crash reports which are generated when application crashes may contain detailed
debugging information about the problem, including function names.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<h5><strong>Debug builds<o:p></o:p></strong></h5>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>It is suggested to compile with
full debug info, and link executable using program database (separate .pdb
file), so that incremental linking is enabled.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<h6><strong>Release builds</strong><strong><span style='font-weight:normal'><o:p></o:p></span></strong></h6>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>It is recommended to compile with
debug info containing line numbers, and link with debug info enabled, but
without use of program database. In this case, debug info is attached to the
executable file, which grows by significant amount, but this should not be a
problem, since debug info is attached to the end of file, and is not loaded
into memory when executable or DLL is loaded. The debug info is located and
used only when program crashes, and report is being generated.<o:p></o:p></span></strong></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>


<div class=MsoNormal>

<hr size=1 width="49%" align=left>

</div>


<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

</div>

</body>

</html>
