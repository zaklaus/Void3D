<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./desc_files/filelist.xml">
<link rel=Edit-Time-Data href="./desc_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>IExcept library</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Mike</o:Author>
  <o:LastAuthor>Michal</o:LastAuthor>
  <o:Revision>62</o:Revision>
  <o:TotalTime>170</o:TotalTime>
  <o:Created>2003-05-02T07:54:00Z</o:Created>
  <o:LastSaved>2003-05-08T12:51:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>765</o:Words>
  <o:Characters>4363</o:Characters>
  <o:Company>Lonely Cat Games</o:Company>
  <o:Lines>36</o:Lines>
  <o:Paragraphs>8</o:Paragraphs>
  <o:CharactersWithSpaces>5358</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>90</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:1627421319 -2147483648 8 0 66047 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{margin-right:0pt;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Times New Roman";
	mso-font-kerning:18.0pt;
	font-weight:bold;}
h4
	{margin-right:0pt;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	background:navy;
	font-size:12.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";}
p
	{margin-right:0pt;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
pre
	{margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
<meta name="Microsoft Border" content="b, default">
</head>

<body bgcolor=white lang=EN-US link=blue vlink=purple style='tab-interval:36.0pt'>

<div class=Section1>

<p style='mso-outline-level:1'><strong><span style='font-size:24.0pt;
mso-bidi-font-size:13.5pt'>IExcept library</span></strong><span
style='font-size:11.0pt;mso-bidi-font-size:12.0pt'><o:p></o:p></span></p>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>


<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>IExcept library is a system for trapping exceptional
situations in application, and working with call stack due to debugging
purposes.<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>In other words, this library handles the cases when application
crashes for whatever reason. Although crashed program is a rare situation, and
end-user should not encounter this, this library serves two main purposes –
allows possibility to elegantly finish program being crashed – telling user
reason, let him save his work, or send crash report to program provider, and
secondly this library helps in a great sense during the development by
providing developers with detailed information about reasons why program
terminated exceptionally.<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>Note that this library has nothing to do with C++
exception handling mechanism, which is considered to be synchronous exception
handling. This library is used for asynchronous exception handling caused by
various faults in the application, such as divide by zero, accessing invalid
memory, etc.<o:p></o:p></span></strong></p>

<p><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>Library:
<b>IExcpt.dll<br>
</b>Header file: <b>IExcpt.h</b><o:p></o:p></span></p>

<p style='mso-outline-level:1'><em><b><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-style:normal'>Functions:<o:p></o:p></span></b></em></p>

<table border=1 cellspacing=0 cellpadding=0 bgcolor="#dddddd" style='margin-left:
 30.2pt;background:#DDDDDD;border-collapse:collapse;border:none;mso-border-alt:
 solid silver .5pt;mso-padding-alt:0pt 5.4pt 0pt 5.4pt'>
 <tr>
  <td width=521 valign=top style='width:326.2pt;border:solid silver .5pt;
  padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'><a href="InitializeExceptions.htm">InitializeExceptions</a><o:p></o:p></span></b></em></p>
  </td>
 </tr>
 <tr>
  <td width=521 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'><a href="SetExceptionCallback.htm">SetExceptionCallback</a><o:p></o:p></span></b></em></p>
  </td>
 </tr>
 <tr>
  <td width=521 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'><a href="SetExceptionSendFunc.htm">SetExceptionSendFunc</a><o:p></o:p></span></b></em></p>
  </td>
 </tr>
 <tr>
  <td width=521 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'><a href="UserException.htm">UserException</a><o:p></o:p></span></b></em></p>
  </td>
 </tr>
 <tr>
  <td width=521 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'><a href="GetCallStack.htm">GetCallStack</a><o:p></o:p></span></b></em></p>
  </td>
 </tr>
 <tr>
  <td width=521 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'><a href="ShowCallStackDialog.htm">ShowCallStackDialog</a><o:p></o:p></span></b></em></p>
  </td>
 </tr>
</table>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial'>Introduction</span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'><o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>By default, when an exception occurs, system displays
default dialog box, telling the user that program crashed and will be
terminated. On some systems, location and contents of registers are displayed. Anyway,
this is rather worthless information even for developers. The exception handler
may be trapped to be caught by different function, which is utilized by this
library. When an exception occurs, a dialog box is displayed, showing the
contents of CPU registers at the moment of crash, type of exception, and
history of called functions up to the fault location, in a readable format.
This is accomplished by loading debug information associated with appropriate
modules, and determining the name of functions in the call stack history.<o:p></o:p></span></strong></p>

<p align=center style='text-align:center'><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial'><img border=0 width=572
height=343 id="_x0000_i1047" src=crash.gif><br>
A dialog box with registers, type of exception,<br>
and detailed call-stack history.<strong><span style='font-weight:normal'><o:p></o:p></span></strong></span></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial'>Exception types</span></strong><strong><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:normal'><o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>The types of exceptions which are caught by the
library are:<o:p></o:p></span></strong></p>

<p style='margin-left:22.5pt'><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>- ACCESS_VIOLATION – accessing
inaccessible memory (read/write from/to invalid page, or writing to read-only
memory)</span></strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Arial'><br>
<strong><span style='font-weight:normal'>- ILLEGAL_INSTRUCTION – invalid
instruction being executed</span></strong><br>
<strong><span style='font-weight:normal'>- INTEGER_DIVIDE_BY_ZERO – dividing by
zero (integer)</span></strong><br>
<strong><span style='font-weight:normal'>- PRIVILEGED_INSTRUCTION – privileged
instruction being executed</span></strong><br>
<strong><span style='font-weight:normal'>- BREAKPOINT – int3 instruction
encountered</span></strong><br>
<strong><span style='font-weight:normal'>- FLT_DENORMAL_OPERAND – FPU
processing denormal value</span></strong><br>
<strong><span style='font-weight:normal'>- FLOAT_DIVIDE_BY_ZERO – FPU dividing
by zero<o:p></o:p></span></strong></span></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>These are most common exception which are generated
by typical application. Anyway the library catches all other exceptions, for
the complete list refer to Win32 API function <i>GetExceptionCode</i>.<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial'>FPU exceptions<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>Note that in order to enable generation of FPU instructions,
appropriate bit in FPU control word must be cleared. See </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>InitializeExceptions</span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-weight:
normal'> for details.</span></strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial'><br>
<strong><span style='font-weight:normal'>The suggested FPU exception bits
during application development are: _EM_INVALID + _EM_OVERFLOW +
_EM_ZERODIVIDE. This way, application developers are able to catch most common
problems when working with FPU math: overflow, dividing by zero, and using
un-initialized floating-point variables. For the last to work, there should be
a way to ensure that all variables are initialized to certain invalid value before
assignment (in debug mode only). And this special value must be a signaled NaN
(not a number). Signaled means that there’re two ways how FPU represents NaNs –
one is non-signaled NaN (not causing an exception when used), the other is
signaled NaN (causing exception when used by FPU if _EM_INVALID bit in control
word is cleared).<o:p></o:p></span></strong></span></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>Although MSVC has a command-line switch that allows
filling local variables by special value (this switch is by default on when you
create a Debug version of a MSVC project). But the value is chosen to be
0xCCCCCCCC, which is unfortunately not an NaN, so it won’t allow you to detect
use of un-initialized floating point variables. Anyway, there’s a way to
filling the local variables and also new allocated memory in debug builds by
other variable than MSVC provides, which may be signaled NaN. For details see </span></strong><strong><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>Debugging
support</span></strong><strong><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-weight:normal'>.<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>Regarding the release version of your application,
the choice to enable FPU exceptions is quite difficult. While it may be wise to
know about all faults in your application also for release version, you may
decide that you will simply silently ignore FPU faults in your shipping
application. Also beware that some third-party libraries or drivers which your
application uses may cause FPU exceptions, it is advised to not catch FPU
exceptions in release builds of your product, and simply ignore them. There’s
more tolerance for FPU errors by programs, because FPU exceptions may be masked
on or off, and also the default program environment (at least MSVC startup routines)
do not enable any FPU exceptions.<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'>The philosophy of Insanity libraries is to catch most
possible software errors (which divide by zero or float overflow definitely
is), so that’s the reason why we advice enabling FPU exceptions during development
and debugging of your application.<o:p></o:p></span></strong></p>

<p><strong><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-weight:normal'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></strong></p>

</div>

</body>

</html>
