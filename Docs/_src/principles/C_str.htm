<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./C_str_files/filelist.xml">
<link rel=Edit-Time-Data href="./C_str_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>C_str</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:LastAuthor>Mike</o:LastAuthor>
  <o:Revision>27</o:Revision>
  <o:TotalTime>101</o:TotalTime>
  <o:Created>2002-03-05T10:59:00Z</o:Created>
  <o:LastSaved>2003-01-08T18:58:00Z</o:LastSaved>
  <o:Pages>3</o:Pages>
  <o:Words>442</o:Words>
  <o:Characters>2521</o:Characters>
  <o:Company>Lonely Cat Games</o:Company>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>3095</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>90</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;
	mso-font-alt:"\FF2D\FF33 \660E\671D";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-1610612033 1757936891 16 0 131231 0;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-1610612033 1757936891 16 0 131231 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h4
	{margin-right:0pt;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
p
	{margin-right:0pt;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 65.95pt 72.0pt 65.95pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1477575381;
	mso-list-type:hybrid;
	mso-list-template-ids:-1600626686 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0pt;}
ul
	{margin-bottom:0pt;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:36.0pt'>

<div class=Section1>

<p><strong><span style='font-size:24.0pt;mso-bidi-font-size:13.5pt'>C_str</span></strong><b><span
style='font-size:24.0pt;mso-bidi-font-size:13.5pt'><br>
<strong>C_fstr</strong></span></b><span style='font-size:11.0pt;mso-bidi-font-size:
12.0pt'><o:p></o:p></span></p>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>


<p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-style:normal'>String class used across Insanity libraries. These are
characteristics of the <b>C_str</b> class:<o:p></o:p></span></em></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><em><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-bidi-font-family:Arial;
font-style:normal'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><![endif]><em><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-style:normal'>optimized reference-counted
allocation of string data (resulting in fast string copying)<o:p></o:p></span></em></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><em><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-bidi-font-family:Arial;
font-style:normal'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><![endif]><em><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-style:normal'>safe allocation, so that C_str may be
used across modules (you may safely assign data to string which is instantiated
in different module)<o:p></o:p></span></em></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><em><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-bidi-font-family:Arial;
font-style:normal'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><![endif]><em><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-style:normal'>automatic duplication of shared
string data if contents is being modified<o:p></o:p></span></em></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><em><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-bidi-font-family:Arial;
font-style:normal'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><![endif]><em><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-style:normal'>optimized comparisons<o:p></o:p></span></em></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 36.0pt'><![if !supportLists]><em><span style='font-size:10.0pt;
mso-bidi-font-size:12.0pt;font-family:Symbol;mso-bidi-font-family:Arial;
font-style:normal'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><![endif]><em><span style='font-size:10.0pt;mso-bidi-font-size:
12.0pt;font-family:Arial;font-style:normal'>either single-char and wide-char
data stored in the class<o:p></o:p></span></em></p>

<p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-style:normal'>Declared in: </span></b></em><em><span
style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;font-style:
normal'>C_str.hpp<o:p></o:p></span></em></p>

<p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-style:normal'>Constructors:<o:p></o:p></span></b></em></p>

<table border=1 cellspacing=0 cellpadding=0 bgcolor="#dddddd" style='margin-left:
 30.2pt;background:#DDDDDD;border-collapse:collapse;border:none;mso-border-alt:
 solid silver .5pt;mso-padding-alt:0pt 5.4pt 0pt 5.4pt'>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str();<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Default constructor, initializing the class to hold
  empty string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str(const C_str &amp;s);<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Constructor initializing the class from other string
  class. The assignment is fast, because the string contained in </span></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'> class is not physically copied, only reference is made.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str(const char *cp);<br>
  C_str(const wchar_t *cp)<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Constructor initializing the class from “C” string ANSI
  and wide-char pointers.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>~C_str ();<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Destructor, releasing all memory allocated for the
  string.<o:p></o:p></span></em></p>
  </td>
 </tr>
</table>

<p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-style:normal'>Functions:<o:p></o:p></span></b></em></p>

<table border=1 cellspacing=0 cellpadding=0 bgcolor="#dddddd" style='margin-left:
 30.2pt;background:#DDDDDD;border-collapse:collapse;border:none;mso-border-alt:
 solid silver .5pt;mso-padding-alt:0pt 5.4pt 0pt 5.4pt'>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str &amp;Assign(const char *cp, dword size);<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Assign raw data to string. Data may be anything, no
  '\0' character at the end is searched or appended. This makes it possible to
  utilize the <b>C_str</b> class as a container object.<br>
  If </span></em><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial'>cp</span></em><em><span style='font-size:10.0pt;
  mso-bidi-font-size:12.0pt;font-family:Arial;font-style:normal'> parameter is
  NULL, the string allocates un-initialized buffer for holding the string, which
  may be filled further by array-access functions.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str &amp;AssignW(const wchar_t *cp);<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Assign null-terminated wide-char string to the
  class.<b><o:p></o:p></b></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>const wchar_t &amp;GetW(<br>
  <span style='mso-tab-count:1'>            </span>dword </span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>pos</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<br>
  wchar_t &amp;GetW(<br>
  <span style='mso-tab-count:1'>            </span>dword </span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>pos</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  );<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Get reference to wide-character in the position
  specified by parameter </span></em><em><span style='font-size:10.0pt;
  mso-bidi-font-size:12.0pt;font-family:Arial'>pos</span></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'>.<b><o:p></o:p></b></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>bool IsWide() const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Method for determining if the class currently holds
  single-char or wide-char string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>bool Match(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s<br>
  </span></em><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial;font-style:normal'>) const;<br>
  bool Matchi(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Compare this string with another wild-char string.
  Following wildcards in the </span></em><em><span style='font-size:10.0pt;
  mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'> string are recognized:<o:p></o:p></span></em></p>
  <p style='margin-left:15.0pt'><em><b><span style='font-size:10.0pt;
  mso-bidi-font-size:12.0pt;font-family:Arial;font-style:normal'>*</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'> - ignore the contents of string to the end<br>
  <b>?</b> - ignore character on current position<o:p></o:p></span></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>The <b>Matchi</b> version differs only in that it
  ignores case during comparision.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>dword Size() const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Get number of characters in the string, without
  terminating NULL character.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>void ToLower();<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Convert all characters to lower case.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>void ToUpper();<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Convert all characters to upper case.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str ToWide();<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Convert string to wide-char version. If the string
  is already in wide-char, this method does nothing.<br>
  Note that there’s no conversion back from wide-char to single-char, because
  not all wide characters may be represented as single characters.<o:p></o:p></span></em></p>
  </td>
 </tr>
</table>

<p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
Arial;font-style:normal'>Operators:<o:p></o:p></span></b></em></p>

<table border=1 cellspacing=0 cellpadding=0 bgcolor="#dddddd" style='margin-left:
 30.2pt;background:#DDDDDD;border-collapse:collapse;border:none;mso-border-alt:
 solid silver .5pt;mso-padding-alt:0pt 5.4pt 0pt 5.4pt'>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str &amp;operator =(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  );<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Assignment operator - fast copy of reference from
  given string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str &amp;operator =(<br>
  const char *</span></b></em><em><span style='font-size:10.0pt;mso-bidi-font-size:
  12.0pt;font-family:Arial'>cp</span></em><em><b><span style='font-size:10.0pt;
  mso-bidi-font-size:12.0pt;font-family:Arial;font-style:normal'><br>
  );<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Assignment from “C” string. This involves physical
  copy of characters into allocated buffer.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>bool operator ==(<br>
  <span style='mso-tab-count:1'>            </span>const char *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp<br>
  </span></em><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial;font-style:normal'>) const;<br>
  bool operator !=(<br>
  <span style='mso-tab-count:1'>            </span>const char *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<br>
  bool operator ==(<br>
  <span style='mso-tab-count:1'>            </span>const wchar_t *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp<br>
  </span></em><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial;font-style:normal'>) const;<br>
  bool operator !=(<br>
  <span style='mso-tab-count:1'>            </span>const wchar_t *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp<br>
  </span></em><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial;font-style:normal'>) const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Compare this string with another “C” string for
  equality.<br>
  This method is relatively slow, depending on the sizes of compared strings.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>bool operator ==(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s<br>
  </span></em><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial;font-style:normal'>) const;<br>
  bool operator !=(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Compare this string with another string for
  equality. This is a more optimal comparison than comparing with raw “C”
  string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str operator +(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<br>
  C_str operator +(<br>
  <span style='mso-tab-count:1'>            </span>const char *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<br>
  C_str operator +(<br>
  <span style='mso-tab-count:1'>            </span>const wchar_t *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'>)<br>
  const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Add this string with another string and return
  result as a string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>C_str &amp;operator +=(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  );<br>
  C_str &amp;operator +=(<br>
  <span style='mso-tab-count:1'>            </span>const char *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  );<br>
  C_str &amp;operator +=(<br>
  <span style='mso-tab-count:1'>            </span>const wchar_t *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>cp</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  );<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Concatenate string with another string and store
  result in this string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>bool operator &lt;(<br>
  <span style='mso-tab-count:1'>            </span>const C_str &amp;</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<br>
  bool operator &lt;(<br>
  <span style='mso-tab-count:1'>            </span>const char *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s<br>
  </span></em><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
  font-family:Arial;font-style:normal'>) const;<br>
  bool operator &lt;(<br>
  <span style='mso-tab-count:1'>            </span>const wchar_t *</span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>s</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Compare this string with another string.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>char &amp;operator [](<br>
  <span style='mso-tab-count:1'>            </span>dword </span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>pos</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  );<br>
  const char &amp;operator [](<br>
  <span style='mso-tab-count:1'>            </span>dword </span></b></em><em><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>pos</span></em><em><b><span
  style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial;
  font-style:normal'><br>
  ) const;<o:p></o:p></span></b></em></p>
  <p><em><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>Get character reference inside of string on
  particular position.<o:p></o:p></span></em></p>
  </td>
 </tr>
 <tr>
  <td width=435 valign=top style='width:326.2pt;border:solid silver .5pt;
  border-top:none;mso-border-top-alt:solid silver .5pt;padding:0pt 5.4pt 0pt 5.4pt'>
  <p><em><b><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:
  Arial;font-style:normal'>operator const char *() const;<br>
  operator const wchar_t *() const;<o:p></o:p></span></b></em></p>
  <p><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Arial'>Get
  pointer to “C” single-char or wide-char string. This is always valid null-terminated
  string, even if the string is empty. The returned pointer remains valid until
  any other operation is done on contents of string.<br>
  The C_str class must contain string in the form, which is being retrieved. No
  conversions are being made.</span></p>
  </td>
 </tr>
</table>

<p><span style='display:none;mso-hide:all'>&nbsp;<o:p></o:p></span></p>

<h4 style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></h4>

</div>

</body>

</html>
